2023-07-21 17:52:21	947abfa3-89b7-44d0-a397-b343d6d390af	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "xb@test.com",
           name: "Ralph",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 18:59:43	970db92f-c3f7-44bb-a958-f09322f5d3ea	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "xb@test.com",
           name: "Ralph",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:04:02	227e3b02-3b96-4d6f-a891-69fc3602fb6a	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:05:18	ecb8f90a-2322-4639-90d4-8ff7ad6e3c16	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:05:52	1e5311fe-3b9e-47da-90af-5751f34e1277	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:07:53	474eeb5e-a1a1-4ab8-a0b4-c8f21c9b36b5	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:10:04	6706b68a-e8f3-4efd-a21b-e2e8700a08a3	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 19:11:00	1bdb68d9-bf49-46c2-bd43-3a48cd3d10d1	PrismaClientValidationError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:23:37

  20 const createUser = async (user: CreateUserRequest) => {
  21   const hashedPassword = await bcrypt.hash(user.password, 10);
  22 
→ 23   const newUser = await prisma.user.create({
         data: {
           email: "yb@test.com",
           name: "Tina",
       +   password: String
         }
       })

Argument `password` is missing.
2023-07-21 20:09:07	5196333f-637b-48a3-8382-9f2815f3df66	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\user.service.ts:33:37

  30 const createUser = async (user: CreateUserRequest) => {
  31   const hashedPassword = await bcrypt.hash(user.password, 10);
  32 
→ 33   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-07-28 12:39:28	d988a495-e8a2-45c7-a565-abba0758c80d	AxiosError: Request failed with status code 400
2023-07-28 12:40:27	8b4f2e14-6a7d-4e81-8adf-3b17dbd485f1	AxiosError: Request failed with status code 401
2023-07-28 12:51:24	4cd78a7d-450c-46c6-92a9-c0136b907032	AxiosError: Request failed with status code 401
2023-07-28 12:58:16	aa525096-cce9-4972-b749-bf271c7c8c27	AxiosError: Request failed with status code 401
2023-07-28 13:00:16	d24e67ce-6e09-4e6b-ad8f-b0c417c06acf	AxiosError: Request failed with status code 401
2023-07-28 13:07:06	073a1b7c-34cd-4745-b9f3-ed43594aad50	AxiosError: Request failed with status code 401
2023-07-28 13:12:07	7436334e-a41a-482b-a760-b9da36b3fd46	AxiosError: Request failed with status code 401
2023-07-28 13:20:41	88321153-4a0d-4bf9-bcb0-9e2efcb0cac9	AxiosError: Request failed with status code 401
2023-07-28 13:23:56	717164ab-9ecb-49e5-94c2-f7f0b5905b3d	AxiosError: Request failed with status code 401
2023-07-28 13:28:52	65929679-5ec9-4ff8-8780-925f42bfeb44	AxiosError: Request failed with status code 401
2023-07-28 13:31:00	6798e890-669c-4a08-8ed0-e2ec489d36bc	AxiosError: Request failed with status code 401
2023-07-29 11:39:09	36555bd1-583d-482d-9dff-b6e2ab00c530	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\enphase.service.ts:101:55

   98 };
   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
→ 101   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-07-29 11:41:44	1636cf37-8f3b-4489-9916-237d4810a021	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\enphase.service.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-07-29 13:55:25	5aaf1aa7-ae3e-4c59-8d50-779d79aa3e4f	Error: Cannot set headers after they are sent to the client
2023-07-29 13:57:17	fac7ed14-e788-4503-abe7-e49241c18542	Error: Cannot set headers after they are sent to the client
2023-07-29 13:57:26	ef6a30bf-cd90-42da-aa6c-da6515f16f06	Error: Cannot set headers after they are sent to the client
2023-07-29 13:59:22	e39fe9a9-2624-439e-95c0-2a32d8d09008	Error: Cannot set headers after they are sent to the client
2023-07-29 13:59:55	d4e2087c-bc87-4507-8217-21f31d5d2155	Error: Cannot set headers after they are sent to the client
2023-07-29 14:04:27	e743bce5-92b4-4f25-b815-79995f7406c3	Error: Cannot set headers after they are sent to the client
2023-07-29 14:17:24	1cbe802b-a0c9-482d-8450-e0b660273a7d	Error: Cannot set headers after they are sent to the client
2023-07-29 14:20:15	a0f5f1dc-8169-44a8-a9e4-437e3f74c70d	Error: Cannot set headers after they are sent to the client
2023-07-29 14:20:16	0f0e7187-0590-4a16-8132-842d23a16ed3	Error: Cannot set headers after they are sent to the client
2023-07-29 14:20:18	a48e7005-effc-4fde-a8ce-e004dca59c17	Error: Cannot set headers after they are sent to the client
2023-07-29 14:23:34	d4a318b2-9c31-4882-8440-e41d2b627a16	Error: Cannot set headers after they are sent to the client
2023-07-29 14:24:12	ac4b5553-e4d7-4282-99d3-e97c142fa70c	Error: Cannot set headers after they are sent to the client
2023-07-29 14:24:19	032d4852-c1d9-4a47-ad4b-d2e9cf24292e	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:02	04470be2-0e6b-456f-bdf1-01688ec442a3	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:02	10b6d420-d93c-4671-bd9b-e98dff658674	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:04	126093da-0b4c-4b03-b4df-b29df1b972a4	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:09	1881335b-de8e-444b-a2e8-5630ad0dc347	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:25	0588fbf0-005f-4a09-8090-c12886ee10e7	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:27	a3d1e6cc-b8c9-4f45-b95a-481474fc8a5b	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:45	b1cce187-dc20-4aae-91df-0eee377640ae	Error: Cannot set headers after they are sent to the client
2023-07-29 14:25:47	801c5a74-3585-4c56-a482-4433b389538b	Error: Cannot set headers after they are sent to the client
2023-07-29 14:26:32	179dacc7-be0e-498f-9aad-f2927aee71f9	Error: Cannot set headers after they are sent to the client
2023-07-29 14:26:34	22dc63a6-5f10-4069-a388-5e5053352c85	Error: Cannot set headers after they are sent to the client
2023-07-29 14:26:35	699d6ac9-ff15-4c2e-8947-ff68c76498dd	Error: Cannot set headers after they are sent to the client
2023-07-29 14:27:25	ae89c5be-5073-4b94-987f-f7a86d6770a9	Error: Cannot set headers after they are sent to the client
2023-07-29 14:32:01	89f82480-b9cd-4cf4-b441-d876ff4bb44c	Error: Cannot set headers after they are sent to the client
2023-07-29 14:33:32	70002bb9-706b-40ef-a849-44116faf6a9c	Error: Cannot set headers after they are sent to the client
2023-07-29 14:34:28	3c69c902-5088-4ed2-aa58-07302a8ac48c	Error: Cannot set headers after they are sent to the client
2023-07-29 14:34:29	9c7ab761-3193-40a3-9852-55bd92ea943c	Error: Cannot set headers after they are sent to the client
2023-07-29 14:34:54	7896b6b5-7505-4a78-9850-df5006ccb42f	Error: Cannot set headers after they are sent to the client
2023-07-29 15:01:43	0f603061-48a2-4aad-8a79-f267d1d06288	Error: Cannot set headers after they are sent to the client
2023-07-29 15:01:43	55ccb4c9-12ec-49df-9074-520f937cbdce	Error: Cannot set headers after they are sent to the client
2023-07-29 15:14:36	f22935a0-3731-4d7e-9c6f-b7c3b2c667e3	Error: Cannot set headers after they are sent to the client
2023-07-29 15:14:44	9ba50e41-408f-4d19-ac7c-1ad7c17d8e83	Error: Cannot set headers after they are sent to the client
2023-07-29 15:20:32	365dabad-deb0-40df-85a1-54bb5a402621	Error: Cannot set headers after they are sent to the client
2023-07-29 15:20:36	085278d9-71e9-4ed8-a545-ac9a40ec133c	Error: Cannot set headers after they are sent to the client
2023-07-29 15:21:03	d7ea7827-09b8-41c6-b486-0898cf3fb1b7	Error: Cannot set headers after they are sent to the client
2023-07-29 15:21:38	e54b7a86-566c-42cb-9d4d-e470e2c38bd3	Error: Cannot set headers after they are sent to the client
2023-07-29 15:21:43	d8ffd27d-bccd-40c7-ab1c-930dda11b240	Error: Cannot set headers after they are sent to the client
2023-07-29 15:25:14	e2bfabb8-7a0e-4234-b2d1-6f16c60fed9a	Error: Cannot set headers after they are sent to the client
2023-07-29 15:25:19	14423875-b092-4cb5-b22b-342b4590cb63	Error: Cannot set headers after they are sent to the client
2023-07-29 15:56:04	8e3b821b-8abb-4c5c-af9b-dacb751960ba	Error: Cannot set headers after they are sent to the client
2023-07-29 15:56:13	cf6c34e9-9617-4a42-857c-f2f7a48cbfb2	Error: Cannot set headers after they are sent to the client
2023-07-29 16:02:01	3b0c4b65-8d95-405b-8aff-9f40124f0c37	Error: Cannot set headers after they are sent to the client
2023-07-29 16:03:14	2980e036-cb65-4b6e-b1dd-ec2b48a7e3f2	Error: Cannot set headers after they are sent to the client
2023-07-29 16:03:17	aebf0060-774d-418f-855c-66467c374498	Error: Cannot set headers after they are sent to the client
2023-07-29 16:10:41	0f350ee7-8a17-412a-b5c9-4f71c6d556ee	Error: Cannot set headers after they are sent to the client
2023-07-29 16:13:57	40bfa170-9a1e-4017-8ab3-3cc793017f02	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\enphase.service.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-07-29 17:09:15	ba2bbf39-f851-468b-91f7-bd12319dd7c7	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\enphase.service.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-07-29 17:09:20	434b71e2-cb8d-4a7f-a30f-360d875e884b	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\enphase.service.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-01 14:27:10	4a4ad64b-3c61-48fa-8820-dc14b8648f16	PrismaClientKnownRequestError: 
Invalid `prisma.user.delete()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:106:47

  103 };
  104 
  105 const deleteUser = async (id: number) => {
→ 106   const deletedUser = await prisma.user.delete(
Foreign key constraint failed on the field: `UserRole_userId_fkey (index)`
2023-08-01 14:46:58	afc15ec6-470a-4dff-8ca3-bae1f540257f	PrismaClientKnownRequestError: 
Invalid `prisma.user.delete()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:106:47

  103 };
  104 
  105 const deleteUser = async (id: number) => {
→ 106   const deletedUser = await prisma.user.delete(
Foreign key constraint failed on the field: `UserRole_userId_fkey (index)`
2023-08-01 14:48:42	a5a9bd27-9f7d-473c-a20a-6f5b7f475186	PrismaClientKnownRequestError: 
Invalid `prisma.user.delete()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:106:47

  103 };
  104 
  105 const deleteUser = async (id: number) => {
→ 106   const deletedUser = await prisma.user.delete(
Foreign key constraint failed on the field: `UserRole_userId_fkey (index)`
2023-08-01 17:27:45	53341900-6a54-42df-b1d4-26fe205170c2	TypeError: userIds.forEach is not a function
2023-08-01 17:28:26	4f468343-6f80-4f92-89df-1b5f03eadbb9	TypeError: userIds.forEach is not a function
2023-08-01 17:29:25	e0d2a859-e623-425b-a7cd-693b486eae93	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 17:53:57	a9e2058f-2ef3-4952-9ad1-96736ac8ee8f	Error: Cannot set headers after they are sent to the client
2023-08-01 17:57:20	d8f1f371-168f-4307-94d1-494a83c291e6	Error: Cannot set headers after they are sent to the client
2023-08-01 17:59:16	c3c2ed8c-26df-416c-9250-0e9a37df352a	Error: Cannot set headers after they are sent to the client
2023-08-01 18:00:23	ed8f34e0-29f1-4dec-a0c9-907dab400c52	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 18:01:49	ccebcac0-c0fa-4d1c-87f4-fe94300c9ac8	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 18:06:27	79f5db33-1d51-47e2-abbb-ccd0827f6edb	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 18:07:30	7ad547c6-dfd6-4a59-828d-b73d10caa345	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 18:14:07	1159787c-2da4-46e8-90ca-c10598a83a82	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-01 18:14:56	f88b99bf-eeaf-4331-9f53-e392dddbda7f	TypeError: Cannot read properties of undefined (reading 'forEach')
2023-08-04 16:04:26	08eaff1b-0c6b-4939-8f44-6f3c290f3bef	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-05 13:43:50	68b5473b-7f35-431f-bdf5-c7b9328ccd79	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 10:21:20	4b254bdf-ff1b-4a2c-bee0-e7fb8814a979	myTestErrorHandler: undefined
2023-08-07 10:21:48	7cccf534-1600-4ea8-889d-efe27b661616	myTestErrorHandler: undefined
2023-08-07 10:31:57	3a47c4c6-976c-4359-9e2f-21ba092aa5af	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 10:38:48	7b937fdb-1524-47af-8eba-1a5222ba2ce0	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 10:39:12	31b00b39-289d-4688-aad6-f32a4a16dd8f	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 12:36:35	4e1a2e77-ca7c-41a0-8473-d79ad0cfa7f5	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 12:57:28	367a3a5f-bf9e-4753-a0d5-ecd5868a9a9a	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 13:43:24	ec69e0f6-30d6-439d-a716-d4773cb4a7ab	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 13:43:36	0673f8a8-52dd-4b2f-8bcf-2fa2e3dfd323	PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:58:37

  55 const createUser = async (user: CreateUserRequest) => {
  56   const hashedPassword = await bcrypt.hash(user.password, 10);
  57 
→ 58   const newUser = await prisma.user.create(
Unique constraint failed on the fields: (`email`)
2023-08-07 15:32:17	33ae044b-a33a-472e-b34a-2b9cab84f5ca	Error: Cannot set headers after they are sent to the client
2023-08-07 16:20:20	42cfb6c6-a760-4e87-bebc-98a7d3caefd7	PrismaClientKnownRequestError: 
Invalid `prisma.user.update()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:86:41

  83     password: hashedPassword,
  84   };
  85 }
→ 86 const updatedUser = await prisma.user.update(
Unique constraint failed on the fields: (`email`)
2023-08-07 18:09:27	d282bdbb-5271-472a-8d4c-87e67b175790	PrismaClientKnownRequestError: 
Invalid `prisma.user.update()` invocation in
D:\dev\voltvector\voltvector-be\src\user\userService.ts:86:41

  83     password: hashedPassword,
  84   };
  85 }
→ 86 const updatedUser = await prisma.user.update(
Unique constraint failed on the fields: (`email`)
2023-08-08 12:27:33	675c6302-c181-4483-898a-b6ae31f18845	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:27:40	f6fc0187-4226-4afa-a26f-1e9eb9e81a59	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:31:08	75325504-518d-4596-842e-1bd290767f57	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:34:01	564b3fdf-7f44-4e21-9d7a-ec9a1b83e53e	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:37:40	4e6fcd7e-7d8b-483b-8a35-1ac2c2957404	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:43:13	392afc6c-9d93-4ca5-87a9-1224ec6a2ce4	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:43:32	21cf87e1-34ea-4c9b-bc8d-3cae098a659b	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:43:52	4a199b6f-575b-44d8-827a-6df561853563	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:46:01	3c4fa40e-9980-4f82-9db2-063781e14c3d	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:47:15	91f2b62a-8315-4b6a-abc3-b95e703bc915	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:47:35	bd40204e-555a-4208-832c-c64d67f3815f	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:50:05	42388ea3-701b-436c-8854-bcb90831c61d	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:50:08	de64a68f-d96b-4c5e-a348-2f164862a8ce	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:50:20	75dd2bb8-491c-46ad-a444-6ca749499a99	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:50:55	e59c095e-8b20-4a79-a135-a4e4f3a40345	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:51:11	2664c1bf-b7ba-4365-a807-b7f350cb557b	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:52:09	cf5e0858-102b-46fc-a770-819a07e63b96	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:52:27	f4dee760-35b1-4253-ba01-a99781bbb390	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:52:29	a96b3372-35cd-4522-a508-2e5fa0f00e87	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:52:43	57adafc2-285a-48a0-8c6a-2ff8bc51a56e	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:52:47	6aebe911-4579-4175-aa97-2a4804b7861f	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:53:36	59d20fa8-8400-47ba-a1b6-72e6d2e5b1d4	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:53:51	3fe5b594-d12a-4b4a-bf00-b9a79390c537	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:02	4b1895d3-9f9e-49d8-a57d-98af6667bac6	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:07	534e97dc-8951-462b-a6ce-0dcda2fab524	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:10	8c6a3721-897c-460b-877e-5829c2f1f5b0	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:13	6a9c97f3-3976-4686-a786-b438a9dc7135	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:23	f049310c-9c59-4af2-b3ee-be0a905d5206	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:33	544d25eb-67b0-4e15-b6b5-f000d8cfb63d	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:40	a15c4ed3-1c5d-4f91-a716-da340a078ee4	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:54:53	2837bde1-1bce-493a-bc8a-dffcc88c62b6	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:55:25	6416ecab-df48-4f4d-9eaf-edd6afb13b3a	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:55:29	7083b1ae-b6f8-4e6c-adab-e67fd01ce801	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:55:38	30ef25d7-c45f-420d-81e8-fa4baaafb24f	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:57:09	68be2d77-71ec-4aa9-b094-80d36add978f	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:57:21	4aae65a8-b91c-4faf-90d1-203ca336dd3c	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:57:51	cb74ff68-d1e3-46c2-94bd-498b4ecfc159	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
2023-08-08 12:57:57	d5feee6d-9df5-40c5-9775-b459e60e5001	PrismaClientValidationError: 
Invalid `prisma.userEnphaseApp.findMany()` invocation in
D:\dev\voltvector\voltvector-be\src\enphase\auth\enphaseAuthService.ts:102:55

   99 
  100 const querySavedEnphaseAppsByUserId = async (userId: number) => {
  101   console.log(`Querying saved enphase apps for user ${userId}`);
→ 102   const userEnphaseApps = await prisma.userEnphaseApp.findMany({
          where: {
        +   userId: {
        +     equals: Int | IntFieldRefInput,
        +     in: Int[] | ListIntFieldRefInput,
        +     notIn: Int[] | ListIntFieldRefInput,
        +     lt: Int | IntFieldRefInput,
        +     lte: Int | IntFieldRefInput,
        +     gt: Int | IntFieldRefInput,
        +     gte: Int | IntFieldRefInput,
        +     not: Int | NestedIntFilter
        +   }
          },
          include: {
            app: true
          }
        })

Argument `userId` is missing.
